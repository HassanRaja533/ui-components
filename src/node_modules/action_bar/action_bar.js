const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)


const quick_actions = require('quick_actions')
const actions = require('actions')
const steps_wizard = require('steps_wizard')

module.exports = action_bar

async function action_bar(opts, protocol) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb
  const on = {
    style: inject,
    icons: iconject
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  
  shadow.innerHTML = `
  <div class="container">
    <div class="actions">
      <actions></actions>
    </div>
    <div class="steps-wizard">
      <steps-wizard></steps-wizard>
    </div>
    <div class="action-bar-container main">
      <div class="command-history">
        <button class="icon-btn"></button>
      </div>
      <div class="quick-actions">
        <quick-actions></quick-actions>
      </div>
    </div>
  </div>
  <style>
  </style>`
  const style = shadow.querySelector('style')
  const main = shadow.querySelector('.main')
  const history_icon = shadow.querySelector('.icon-btn')
  const quick_placeholder = shadow.querySelector('quick-actions')
  const actions_placeholder = shadow.querySelector('actions')
  const steps_wizard_placeholder = shadow.querySelector('steps-wizard')

  let console_icon = {}
  const subs = await sdb.watch(onbatch)

  const _ = {
    up: null,
    send_quick_actions: null,
    send_actions: null,
    send_steps_wizard: null
  }
  let actions_data = null
  let selected_action = null

  if(protocol){
    let send = protocol(msg => onmessage(msg))
    _.up = send
  }

  history_icon.innerHTML = console_icon
  history_icon.onclick = onhistory
  const element = protocol ? await quick_actions(subs[0], quick_actions_protocol) : await quick_actions(subs[0])
  quick_placeholder.replaceWith(element)

  const actions_el = await actions(subs[1], actions_protocol)
  actions_el.classList.add('hide')
  actions_placeholder.replaceWith(actions_el)

  const steps_wizard_el = await steps_wizard(subs[2], steps_wizard_protocol)
  steps_wizard_el.classList.add('hide')
  steps_wizard_placeholder.replaceWith(steps_wizard_el)

  return el

  async function onbatch (batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
  }
  function fail (data, type) { throw new Error('invalid message', { cause: { data, type } }) }

  function inject(data) {
    style.innerHTML = data.join('\n')
  }

  function iconject(data) {
    console_icon = data[0]
  }
  function onhistory() {
    _.up({ type: 'console_history_toggle', data: null })
  }


  // --- Toggle Views ---
  function toggle_view(el, show) {
    el.classList.toggle('hide', !show)
  }

  function actions_toggle_view(display) {
    toggle_view(actions_el, display === 'block')
  }

  function steps_toggle_view(display) {
    toggle_view(steps_wizard_el, display === 'block')
  }

  // -------------------------------
  // Protocol: actions
  // -------------------------------
  
  function actions_protocol(send) {
    _.send_actions = send

    const actions_handlers = {
      selected_action: actions__selected_action
    }

    return function on({ type, data }) {
      const handler = actions_handlers[type] || fail
      handler(data, type)
    }
  }

  function actions__selected_action(data, type) {
    selected_action = data?.action || null
    _.send_quick_actions?.({
      type,
      data: {
        ...data,
        total_steps: actions_data[selected_action]?.length || 0
      }
    })

    _.send_steps_wizard?.({ type: 'init_data', data: actions_data[selected_action] })
    steps_toggle_view('block')

    if (actions_data[selected_action]?.length > 0) {
      const first_step = actions_data[selected_action][0]
      _.up?.({ type: 'render_form', data: first_step })
    }

    _.up?.({ type, data: selected_action })
    actions_toggle_view('none')
  }


  // -------------------------------
  // Protocol: quick actions
  // -------------------------------


  function quick_actions_protocol (send) {
    _.send_quick_actions = send

    const quick_handlers = {
      display_actions: quick_actions__display_actions,
      action_submitted: quick_actions__action_submitted
    }

    return on
    function on ({ type, data }) {
      const handler = quick_handlers[type] || fail
      handler(data, type)
      
    }
  }
  
  function quick_actions__display_actions(data) {
    actions_toggle_view(data)
    if (data === 'none') {
      steps_toggle_view('none')
      _.up?.({ type: 'clean_up', data: selected_action })
    }
  }

  function quick_actions__action_submitted(data) {
    const result = JSON.stringify(actions_data[selected_action].map(step => step.data), null, 2)
    _.send_quick_actions?.({ type: 'deactivate_input_field' })
    _.up?.({ type: 'action_submitted', data: { result, selected_action } })
  }

  // -------------------------------
  // Protocol: steps wizard
  // -------------------------------

  function steps_wizard_protocol(send) {
    _.send_steps_wizard = send

    const steps_handlers = {
      step_clicked: steps_wizard__step_clicked
    }
    
    return function on({ type, data }) {
      const handler = steps_handlers[type] || default_steps_handler
      handler(data, type)
    }
  }

  function steps_wizard__step_clicked(data) {
    _.send_quick_actions?.({ type: 'update_current_step', data })
    _.up?.({ type: 'render_form', data })
  }

  function onmessage ({ type, data }) {
    if (type === 'load_actions') {
      actions_data = data
      console.log('action_bar.onmessage', type, data)
      _?.send_actions({ type, data })
    } else if (type === 'selected_action') {
      console.log('action_bar.onmessage', type, data)
      _?.send_quick_actions({ type, data })
    } else if (type === 'form_data') {
      _?.send_steps_wizard({ type: "init_data", data: actions_data[selected_action] })
    } else if (type === 'show_submit_btn') {
      _?.send_quick_actions({ type: 'show_submit_btn' })
    }
  }
}

function fallback_module() {
  return {
    api: fallback_instance,
    _: {
      'quick_actions': { $: '' },
      'actions': { $: '' },
      'steps_wizard': { $: '' }
    }
  }
  function fallback_instance() {
    return {
      _: {
        'quick_actions': {
          0: '',
          mapping: {
            'style': 'style',
            'icons': 'icons',
            'actions': 'actions',
            'hardcons': 'hardcons'
          }
        },
        'actions': {
          0: '',
          mapping: {
            'style': 'style',
            'icons': 'icons',
            'actions': 'actions',
            'hardcons': 'hardcons'
          }
        },
        'steps_wizard': {
          0: '',
          mapping: {
            'style': 'style',
            'variables': 'variables'
          }
        }
      },
      drive: {
        'icons/': {
          'console.svg': {
            '$ref': 'console.svg'
          }
        },
        'style/': {
          'theme.css': {
            raw: `
              .container {
                display: flex;
                flex-direction: column;
              }
              .action-bar-container {
                display: flex;
                flex-direction: row;
                flex-wrap: nowrap;
                align-items: center;
                background: #131315;
                padding: 8px;
                gap: 12px;
              }
              .command-history {
                display: flex;
                align-items: center;
              }
              .quick-actions {
                display: flex;
                flex: auto;
                flex-direction: row;
                flex-wrap: nowrap;
                align-items: center;
                min-width: 300px;
              }
              .hide {
                display: none;
              }
              
              .icon-btn {
                display: flex;
                min-width: 32px;
                height: 32px;
                border: none;
                background: transparent;
                cursor: pointer;
                flex-direction: row;
                justify-content: center;
                align-items: center;
                padding: 6px;
                border-radius: 6px;
                color: #a6a6a6;
              }
              .icon-btn:hover {
                background: rgba(255, 255, 255, 0.1);
              }
              svg {
                width: 20px;
                height: 20px;
              }
            `
          }
        }
      }
    }
  }
}
