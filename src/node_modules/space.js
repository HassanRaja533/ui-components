const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const console_history = require('console_history')
const actions = require('actions')

module.exports = component

async function component (opts, protocol) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: inject_style
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
  <div class="space">
    <actions-placeholder></actions-placeholder>
    <console-history-placeholder></console-history-placeholder>
  </div>`

  const actions_placeholder = shadow.querySelector('actions-placeholder')
  const console_placeholder = shadow.querySelector('console-history-placeholder')
  let console_history_el = null
  let actions_el = null

  const subs = await sdb.watch(onbatch)
  let send = null
  let _ = null
  if(protocol) {
    send = protocol(msg => onmessage(msg))
    _ = { up: send, actions: null, console_history: null }
  }
  
  actions_el = protocol ? await actions(subs[1], actions_protocol) : await actions(subs[1])
  actions_el.classList.add('actions')
  actions_placeholder.replaceWith(actions_el)
  
  console_history_el = protocol ? await console_history(subs[0], console_history_protocol) : await console_history(subs[0])
  console_history_el.classList.add('console-history')
  console_placeholder.replaceWith(console_history_el)
  let console_view = false
  let actions_view = false

  if (protocol) {
    console_history_el.style.setProperty('display', 'none')
    actions_el.style.setProperty('display', 'none')
  }

  return el
  
  function console_history_toggle_view () { 
    if(console_view) console_history_el.style.setProperty('display', 'none')
    else console_history_el.style.setProperty('display', 'block')
    console_view = !console_view
  }
  function actions_toggle_view (data) {
    if(actions_view) actions_el.style.setProperty('display', data)
    else actions_el.style.setProperty('display', data)
    actions_view = !actions_view
  } 

  function onbatch (batch) {
    for (const { type, data } of batch) {
      on[type] && on[type](data)
    }
  }

  function inject_style (data) {
    const sheet = new CSSStyleSheet()
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets = [sheet]
  }
  
  // ---------
  // PROTOCOLS
  // ---------

  function console_history_protocol (send) {
    _.send_console_history = send
    return on
    function on ({ type, data }) { 
      _.up(type, data)
    }
  }
  
  function actions_protocol (send) {
    _.send_actions = send
    return on
    function on ({ type, data }) { 
      _.up({ type, data })
    }
  }
  
  function onmessage ({ type, data }) {
    if(type == 'console_history_toggle') console_history_toggle_view()
    else if (type == 'display_actions') actions_toggle_view(data)
    else if (type == 'filter_actions') _.send_actions({ type, data })
  }
}

function fallback_module () {
  return {
    api: fallback_instance,
    _: {
      'console_history': {
        $: ''
      },
      'actions': {
        $: ''
      }
    }
  }

  function fallback_instance () {
    return {
      _: {
        'console_history': {
          0: '',
          mapping: {
            'style': 'style',
            'commands': 'commands',
            'icons': 'icons',
            'scroll': 'scroll'
          }
        },
        'actions': {
          0: '',
          mapping: {
            'style': 'style',
            'actions': 'actions',
            'icons': 'icons',
            'hardcons': 'hardcons'
          }
        }
      },
      drive: {
        'style/': {
          'theme.css': {
            raw: `
              .space {
                display: flex;
                min-height: 100px;
                width: 100%;
                height: inherit;
                flex-direction: column-reverse;
                background-color:#2e3440;
                position: relative;
              }
              .console-history {
                position: relative;
                width: 100%;
              }
              .actions {
                position: relative;
                width: 100%;
              }
            `
          }
        }
      }
    }
  }
}
