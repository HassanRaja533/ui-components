const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const console_history = require('console_history')
const actions = require('actions')

module.exports = component

async function component (opts, callback = () => console.log('space callback'), actions_callback = null) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: inject_style
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
  <div class="space">
    <actions-placeholder></actions-placeholder>
    <console-history-placeholder></console-history-placeholder>
  </div>`

  const actions_placeholder = shadow.querySelector('actions-placeholder')
  const console_placeholder = shadow.querySelector('console-history-placeholder')
  let console_history_el = null
  let actions_el = null

  const subs = await sdb.watch(onbatch)

  actions_el = await actions(subs[1], (action_data) => {
    console.log('Action selected:', action_data)
  }, actions_callback)
  actions_el.classList.add('actions')
  actions_placeholder.replaceWith(actions_el)
  
  console_history_el = await console_history(subs[0], callback)
  console_history_el.classList.add('console-history')
  console_placeholder.replaceWith(console_history_el)
  
  el.toggle_console_history = () => {
    if (console_history_el && console_history_el.toggleVisibility) {
      console_history_el.toggleVisibility()
    }
  }

  el.show_actions = () => {
    if (actions_el && actions_el.show_actions) {
      actions_el.show_actions()
    }
  }

  el.hide_actions = () => {
    if (actions_el && actions_el.hide_actions) {
      actions_el.hide_actions()
    }
  }

  el.toggle_actions = () => {
    if (actions_el && actions_el.toggle_actions) {
      actions_el.toggle_actions()
    }
  }

  el.filter_actions = (search_term) => {
    if (actions_el && actions_el.filter_actions) {
      actions_el.filter_actions(search_term)
    }
  }

  return el

  function onbatch (batch) {
    for (const { type, data } of batch) {
      on[type] && on[type](data)
    }
  }

  function inject_style (data) {
    const sheet = new CSSStyleSheet()
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets = [sheet]
  }
}

function fallback_module () {
  return {
    api: fallback_instance,
    _: {
      'console_history': {
        $: ''
      },
      'actions': {
        $: ''
      }
    }
  }

  function fallback_instance () {
    return {
      _: {
        'console_history': {
          0: '',
          mapping: {
            'style': 'style',
            'commands': 'commands',
            'icons': 'icons',
            'scroll': 'scroll'
          }
        },
        'actions': {
          0: '',
          mapping: {
            'style': 'style',
            'actions': 'actions',
            'icons': 'icons',
            'hardcons': 'hardcons'
          }
        }
      },
      drive: {
        'style/': {
          'theme.css': {
            raw: `
              .space {
                display: flex;
                min-height: 100px;
                width: 100%;
                height: inherit;
                flex-direction: column-reverse;
                background-color:#2e3440;
                position: relative;
              }
              .console-history {
                position: relative;
                width: 100%;
              }
              .actions {
                position: relative;
                width: 100%;
              }
            `
          }
        }
      }
    }
  }
}
