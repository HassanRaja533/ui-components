const { search, close } = require('icons')
module.exports = search_bar
function search_bar ({ default_path = 'Home > Documents > Current' } = {}) {
  const container = 'search-bar-container'
  const search_input_container_class = 'search-input-container'
  const search_input_content_class = 'search-input-content'
  const search_input_text_class = 'search-input-text'
  const search_input_class = 'search-input'
  const search_reset_button_class = 'search-reset-button'
  // const opts = {theme: 'dark'}

  const el = document.createElement('div')
  el.className = container
  const shadow = el.attachShadow({ mode: 'closed' })
  const input_container_html = `
    <div class="${search_input_container_class}">
      <div class="${search_input_content_class}">
        <div class="${search_input_text_class}">${default_path}</div>
        <input type="text" class="${search_input_class}" style="display: none;">
      </div>
      <button class="${search_reset_button_class}">${search()}</button>
    </div>
    <style></style>
  `

  shadow.innerHTML = input_container_html
  const style = shadow.querySelector('style')
  style.textContent = get_theme() // get_theme(opts)

  const input_container = shadow.querySelector(`.${search_input_container_class}`)
  const input_content = shadow.querySelector(`.${search_input_content_class}`)
  const text_span = shadow.querySelector(`.${search_input_text_class}`)
  const input_element = shadow.querySelector(`.${search_input_class}`)
  const reset_button = shadow.querySelector(`.${search_reset_button_class}`)

  input_container.addEventListener('click', handle_action_input_focus())

  input_element.addEventListener('blur', handle_action_input_blur(Event))

  reset_button.addEventListener('click', (event) => {
    event.stopPropagation()
    handle_reset()
  })

  text_span.addEventListener('click', (event) => {
    event.stopPropagation()
    handle_breadcrumb_click()
  })

  return el

  function handle_action_input_focus (event) {
    input_content.innerHTML = ''
    input_content.appendChild(input_element)
    input_element.style.display = 'block'
    input_element.focus()
    reset_button.innerHTML = close()
    // reset_button.appendChild(close())
    }
  function handle_action_input_blur (event) {
    if (input_element.value === '') {
      input_content.innerHTML = ''
      input_content.appendChild(text_span)
      input_element.style.display = 'none'
      reset_button.innerHTML = search()
      // reset_button.appendChild(search())
    }
  }
  function handle_reset (event) {
    input_element.value = ''
    input_content.innerHTML = ''
    input_content.appendChild(text_span)
    input_element.style.display = 'none'
    reset_button.innerHTML = search()
    // reset_button.appendChild(search())
  }
  function handle_breadcrumb_click (event) {
    input_content.innerHTML = ''
    input_content.appendChild(input_element)
    input_element.style.display = 'block'
    input_element.placeholder = '#night'
    input_element.focus()
    reset_button.innerHTML = close()
    // reset_button.appendChild(close())
  }
}
function get_theme (opts) {
  return `
  .search-bar-container {
    flex: 1;
    position: relative;
  }

  .search-input-container {
    height: 2rem;
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    background-color: #303030;
    border-radius: 0.375rem;
    cursor: text;
  }
  svg {
    display: block;
    margin: auto;
  }
  .search-input-content {
    flex: 1;
  }

  .search-input-text {
    font-size: 0.875rem;
    color: #a0a0a0;
  }

  .search-input {
    width: 100%;
    background-color: transparent;
    outline: none;
    border: none;
    color: #a0a0a0;
    font-size: 0.875rem;
  }

  .search-reset-button {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-left: 0;
    padding: 0;
    border: none;
    background-color: transparent;
  }

  .search-reset-button:hover {
    cursor: pointer;
  }
`
}
