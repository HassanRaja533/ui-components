const { search, close } = require('./icons')

function search_bar ({ default_path = 'Home > Documents > Current' } = {}) {
  const search_bar_container_class = 'search-bar-container'
  const search_input_container_class = 'search-input-container'
  const search_input_content_class = 'search-input-content'
  const search_input_text_class = 'search-input-text'
  const search_input_class = 'search-input'
  const search_reset_button_class = 'search-reset-button'

  const element = document.createElement('div')
  element.className = search_bar_container_class

  const shadow = element.attachShadow({ mode: 'closed' })

  const css = document.createElement('style')
  css.textContent = styles
  shadow.appendChild(css)

  const input_container_html = `
    <div class="${search_input_container_class}">
      <div class="${search_input_content_class}">
        <div class="${search_input_text_class}">${default_path}</div>
        <input type="text" class="${search_input_class}" style="display: none;">
      </div>
      <button class="${search_reset_button_class}">${search()}</button>
    </div>
  `
  // using += so that the styles are not overwritten
  shadow.innerHTML += input_container_html

  const input_container = shadow.querySelector(`.${search_input_container_class}`)
  const input_content = shadow.querySelector(`.${search_input_content_class}`)
  const text_span = shadow.querySelector(`.${search_input_text_class}`)
  const input_element = shadow.querySelector(`.${search_input_class}`)
  const reset_button = shadow.querySelector(`.${search_reset_button_class}`)

  const handle_action_input_focus = () => {
    input_content.innerHTML = ''
    input_content.appendChild(input_element)
    input_element.style.display = 'block'
    input_element.focus()
    reset_button.innerHTML = close()
    // reset_button.appendChild(close())
  }

  const handle_action_input_blur = () => {
    if (input_element.value === '') {
      input_content.innerHTML = ''
      input_content.appendChild(text_span)
      input_element.style.display = 'none'
      reset_button.innerHTML = search()
      // reset_button.appendChild(search())
    }
  }

  const handle_reset = () => {
    input_element.value = ''
    input_content.innerHTML = ''
    input_content.appendChild(text_span)
    input_element.style.display = 'none'
    reset_button.innerHTML = search()
    // reset_button.appendChild(search())
  }

  const handle_breadcrumb_click = () => {
    input_content.innerHTML = ''
    input_content.appendChild(input_element)
    input_element.style.display = 'block'
    input_element.placeholder = '#night'
    input_element.focus()
    reset_button.innerHTML = close()
    // reset_button.appendChild(close())
  }

  input_container.addEventListener('click', () => {
    handle_action_input_focus()
  })

  input_element.addEventListener('blur', () => {
    handle_action_input_blur()
  })

  reset_button.addEventListener('click', (event) => {
    event.stopPropagation()
    handle_reset()
  })

  text_span.addEventListener('click', (event) => {
    event.stopPropagation()
    handle_breadcrumb_click()
  })

  return element
}

module.exports = search_bar

const styles = `
.search-bar-container {
  flex: 1;
  position: relative;
}

.search-input-container {
  height: 2rem;
  padding-left: 0.75rem;
  padding-right: 0.75rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: #303030;
  border-radius: 0.375rem;
  cursor: text;
}

.search-input-content {
  flex: 1;
}

.search-input-text {
  font-size: 0.875rem;
  color: #a0a0a0;
}

.search-input {
  width: 100%;
  background-color: transparent;
  outline: none;
  border: none;
  color: #a0a0a0;
  font-size: 0.875rem;
}

.search-reset-button {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-left: 0;
  padding: 0;
  border: none;
  background-color: transparent;
}

.search-reset-button:hover {
  cursor: pointer;
}
`