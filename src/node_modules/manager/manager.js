const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const quick_actions = require('quick_actions')
const actions = require('actions')
const form_input = require('form_input')
const input_test = require('input_test')
const program = require('program')

const component_modules = {
  form_input,
  input_test
  // Add more form input components here if needed
}

module.exports = manager

async function manager(opts) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
  }

  let variables = []
  let selected_action = null

  const _ = {
    send_quick_actions: null,
    send_actions: null,
    send_form_input: {},
    send_steps_wizard: null,
    send_program: null
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
    <div class="main">
      <actions></actions>
      <form-input></form-input>
      <quick-actions></quick-actions>
      <actions></actions>
      <program></program>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const quick_actions_placeholder = shadow.querySelector('quick-actions')
  const actions_placeholder = shadow.querySelector('actions')
  const form_input_placeholder = shadow.querySelector('form-input')
  const program_placeholder = shadow.querySelector('program')

  const subs = await sdb.watch(onbatch)

  
  const actions_el = await actions(subs[0], actions_protocol)
  actions_el.classList.add('hide')
  actions_placeholder.replaceWith(actions_el)

  const quick_actions_el = await quick_actions(subs[1], quick_actions_protocol)
  quick_actions_placeholder.replaceWith(quick_actions_el)
  
  const program_el = await program(subs[2], program_protocol)
  program_el.classList.add('hide')
  program_placeholder.replaceWith(actions_el)


  const form_input_elements = {}

  for (const [component_name, component_fn] of Object.entries(component_modules)) {
    const index = get_form_input_component_index(component_name)
    const el = await component_fn(subs[index], form_input_protocol(component_name))
    el.classList.add('hide')
    form_input_elements[component_name] = el
    form_input_placeholder.parentNode.insertBefore(el, form_input_placeholder)
  }

  form_input_placeholder.remove()

  return el

  // --- Internal Functions ---
  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
  }

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  function inject(data) {
    style.replaceChildren((() => {
      return document.createElement('style').textContent = data[0]
    })())
  }

  function toggle_view(el, show) {
    el.classList.toggle('hide', !show)
  }

  function actions_toggle_view(display) {
    toggle_view(actions_el, display === 'block')
  }

  function form_input_protocol(component_name) {
    return function (send) {
      _.send_form_input[component_name] = send
      return function on({ type, data }) {
        if (type === 'action_submitted') {
          const step = variables[selected_action][data?.index]
          Object.assign(step, {
            is_completed: true,
            status: 'completed',
            data: data?.value
          })
          _.send_quick_actions({ type: "init_data", data: variables[selected_action] })

          if (variables[variables.length - 1]?.is_completed) {
            _.send_quick_actions({ type: 'show_submit_btn' })
          }
        }
      }
    }
  }

  function render_form_component(component_name) {
    for (const name in form_input_elements) {
      toggle_view(form_input_elements[name], name === component_name)
    }
  }

  function get_form_input_component_index(component) {
    const { _: components } = fallback_module()
    return Object.keys(components).indexOf(component)
  }

  function program_protocol(send) {
    _.send_program = send
    return on
    function on({ type, data }) {
      if (type === 'load_actions') {
        variables = data
        _.send_actions?.({ type, data })
      }
    }
  }

  function actions_protocol(send) {
    _.send_actions = send
    return on
    function on({ type, data }) {
      console.log('actions_protocol', type, data)
      selected_action = data?.action || null
      _.send_quick_actions({
        type,
        data: {
          ...data,
          steps_info: variables[selected_action] || [],
          total_steps: variables[selected_action].length || 0
        }
      })
   
      if (variables[selected_action].length > 0) {
        const firstStep = variables[selected_action][0]
        render_form_component(firstStep.component)
      }
      actions_toggle_view('none')
    }
  }

  function quick_actions_protocol(send) {
    _.send_quick_actions = send
    return on
    function on({ type, data }) {
      on_quick_actions_message({ type, data })
    }
  }

  function on_quick_actions_message({ type, data }) {
    if (type == 'display_actions') {
      actions_toggle_view(data)
      if (data === 'none') {
        for (const el of Object.values(form_input_elements)) {
          toggle_view(el, false)
        }
        cleanup()
      }
    } else if (type == 'action_submitted') {
      alert(JSON.stringify(variables[selected_action].map(step => step.data), null, 2))
      _.send_quick_actions?.({ type: 'deactivate_input_field' })
    } else if (type == 'render_form') {
      render_form_component(data.component)
      const send = _.send_form_input[data.component]
      if (send) send({ type: 'step_data', data })
    }
  }

  function cleanup() {
    console.log('Cleaning up variables for selected action:', selected_action, variables[selected_action])
    const cleaned = variables[selected_action].map(step => ({
      ...step,
      is_completed: false,
      data: ''
    }))
  }
}

// --- Fallback Module ---
function fallback_module() {
  return {
    api: fallback_instance,
    _: {
      'actions': { $: '' },
      'quick_actions': { $: '' },
      'program': { $: '' },
      'form_input': { $: '' },
      'input_test': { $: '' }
    }
  }

  function fallback_instance() {
    return {
      _: {
        'actions': {
          0: '',
          mapping: {
            'style': 'style',
            'actions': 'actions',
            'icons': 'icons',
            'hardcons': 'hardcons'
          }
        },
        'quick_actions': {
          0: '',
          mapping: {
            'style': 'style',
            'icons': 'icons',
            'actions': 'actions',
            'hardcons': 'hardcons'
          }
        },
        'program': {
          0: '',
          mapping: {
            'style': 'style',
            'variables': 'variables',
          }
        },
        'form_input': {
          0: '',
          mapping: {
            'style': 'style'
          }
        },
        'input_test': {
          0: '',
          mapping: {
            'style': 'style'
          }
        }
      },
      drive: {
        'style/': {
          'manager.css': { 
            raw: `
              .main {
                display: flex;
                flex-direction: column;
                width: 100%;
                height: 100%;
                background: #131315;
              }
              .hide {
                display: none;
              }
            ` 
          }
        }
      }
    }
  }
}
