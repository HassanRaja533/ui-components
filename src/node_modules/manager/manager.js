const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const form_input = require('form_input')
const input_test = require('input_test')
const program = require('program')
const action_bar = require('action_bar')

const component_modules = {
  form_input,
  input_test
  // Add more form input components here if needed
}

module.exports = manager

async function manager(opts) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
  }

  let variables = []
  let selected_action = null

  const _ = {
    send_actions_bar: null,
    send_form_input: {},
    send_steps_wizard: null,
    send_program: null
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
    <div class="main">
      <form-input></form-input>
      <action-bar></action-bar>
      <program></program>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const form_input_placeholder = shadow.querySelector('form-input')
  const program_placeholder = shadow.querySelector('program')
  const action_bar_placeholder = shadow.querySelector('action-bar')

  const subs = await sdb.watch(onbatch)

  const action_bar_el = await action_bar(subs[0], actions_bar_protocol)
  action_bar_placeholder.replaceWith(action_bar_el)

  const program_el = await program(subs[1], program_protocol)
  program_el.classList.add('hide')
  program_placeholder.replaceWith(program_el)


  const form_input_elements = {}

  for (const [component_name, component_fn] of Object.entries(component_modules)) {
    const index = get_form_input_component_index(component_name)
    const el = await component_fn(subs[index], form_input_protocol(component_name))
    el.classList.add('hide')
    form_input_elements[component_name] = el
    form_input_placeholder.parentNode.insertBefore(el, form_input_placeholder)
  }

  form_input_placeholder.remove()

  return el

  // --- Internal Functions ---
  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
  }

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  function inject(data) {
    style.replaceChildren((() => {
      return document.createElement('style').textContent = data[0]
    })())
  }

  function toggle_view(el, show) {
    el.classList.toggle('hide', !show)
  }

  function get_form_input_component_index(component) {
    const { _: components } = fallback_module()
    return Object.keys(components).indexOf(component)
  }
  
  function render_form_component(component_name) {
    for (const name in form_input_elements) {
      toggle_view(form_input_elements[name], name === component_name)
    }
  }

  function form_input_protocol(component_name) {
    return function (send) {
      _.send_form_input[component_name] = send
      
      const form_input_handlers = {
        action_submitted: form__action_submitted
      }

      return function on({ type, data }) {  
        const handler = form_input_handlers[type] || fail
        handler(data, type)
      }
    }
  }

  function form__action_submitted(data, type) {
    console.log('manager.on_form_submitted', data, variables, selected_action)
    const step = variables[selected_action][data?.index]
    Object.assign(step, {
      is_completed: true,
      status: 'completed',
      data: data?.value
    })
    _?.send_actions_bar({ type: "form_data", data: variables[selected_action] })

    if (variables[selected_action][variables[selected_action].length - 1]?.is_completed) {
      _.send_actions_bar({ type: 'show_submit_btn' })
    }
  }

  function program_protocol(send) {
    _.send_program = send

    const program_handlers = {
      load_actions: program__load_actions
    }
    return function on({ type, data }) {
      const handler = program_handlers[type] || fail
      handler(data, type)
    }
  }

  function program__load_actions(data, type) {
    variables = data  
    _.send_actions_bar?.({ type, data })
  }

  function actions_bar_protocol(send) {
    _.send_actions_bar = send

    const action_bar_handlers = {
      render_form: action_bar__render_form,
      clean_up: action_bar__clean_up,
      action_submitted: action_bar__action_submitted,
      selected_action: action_bar__selected_action
    }

    return function on({ type, data }) {
      const handler = action_bar_handlers[type] || fail
      handler(data, type)
    }
  }

  function action_bar__render_form(data, type) {
    render_form_component(data.component)
    const send = _.send_form_input[data.component]
    if (send) send({ type: 'step_data', data })
  }

  function action_bar__action_submitted(data, type) {
    _.send_program({ type: 'display_result', data })
  }

  function action_bar__selected_action(data, type) {
    selected_action = data
  }

  function action_bar__clean_up(data, type) {
    data && cleanup(data)
  }

  function cleanup(selected_action) {
    const cleaned = variables[selected_action].map(step => ({
      ...step,
      is_completed: false,
      data: ''
    }))
    variables[selected_action] = cleaned
    for (const el of Object.values(form_input_elements)) {
      toggle_view(el, false)
    }
  }
}

// --- Fallback Module ---
function fallback_module() {
  return {
    api: fallback_instance,
    _: {
      'action_bar': { $: '' },
      'program': { $: '' },
      'form_input': { $: '' },
      'input_test': { $: '' }
    }
  }

  function fallback_instance() {
    return {
      _: {
        'action_bar': {
          0: '',
          mapping: {
            'icons': 'icons',
            'style': 'style'
          }
        },
        'program': {
          0: '',
          mapping: {
            'style': 'style',
            'variables': 'variables',
          }
        },
        'form_input': {
          0: '',
          mapping: {
            'style': 'style'
          }
        },
        'input_test': {
          0: '',
          mapping: {
            'style': 'style'
          }
        }
      },
      drive: {
        'style/': {
          'manager.css': { 
            raw: `
              .main {
                display: flex;
                flex-direction: column;
                width: 100%;
                height: 100%;
                background: #131315;
              }
              .hide {
                display: none;
              }
            ` 
          }
        }
      }
    }
  }
}
