const { search, close } = require('icons')
const STATE = require('../STATE'); // Adjust path as needed

const statedb = STATE(__filename);
const {sdb, subs: [get]} = statedb(fallback_module)
function fallback_module() {
    return {
        api: fallback_instance,
        _: {
          
        }
    }
}
function fallback_instance () {
    return {
        _: {
            icon1: {},
            icon2: {}
        },
        drive: {
            inputs: {
            'search_bar.json': {
                data: {
                path: 'Home > Documents > Current',
                searchText: '',
                isInputVisible: false,
                placeholderText: ''
                }
            }
        }
        }
    };
}

async function search_bar (opts) {
  const { id, sdb } = await get(opts.sid);

  const el = document.createElement('div')
  el.className = 'search-bar-container'
  const shadow = el.attachShadow({ mode: 'closed' })

  const sheet = new CSSStyleSheet()
  const theme_opts = {} // for get_theme(opts), opts = {theme:dark}
  sheet.replaceSync(get_theme(theme_opts))
  shadow.adoptedStyleSheets = [sheet]

  shadow.innerHTML = `
  <div class="search-input-container">
    <div class="search-input-content">
      <div class="search-input-text"></div>
      <input type="text" class="search-input" style="display: none;">
    </div>
    <button class="search-reset-button"></button>
  </div>`

  const input_container = shadow.querySelector('.search-input-container')
  const input_content = shadow.querySelector('.search-input-content')
  const text_span = shadow.querySelector('.search-input-text')
  const input_element = shadow.querySelector('.search-input')
  const reset_button = shadow.querySelector('.search-reset-button')
    const subs = await sdb.watch(onbatch)

    // Initial Render
    render(await sdb.get('json'))

    async function onbatch (batch) {
        for (const {type, data} of batch){
            if(type === 'json') {
                render(data)
            }
        }
    }
    async function render(data){
        text_span.textContent = data.path;
        input_element.value = data.searchText;
        input_element.placeholder = data.placeholderText;
        input_element.style.display = data.isInputVisible ? 'block' : 'none';

        if (data.isInputVisible) {
            input_content.replaceChildren(input_element);
            input_element.focus();
            reset_button.innerHTML = await close({sid: subs[1]})
        } else {
            input_content.replaceChildren(text_span);
            reset_button.innerHTML = await search({sid: subs[0]})
        }
    }

  input_container.onclick = on_input_container_click
  input_element.onblur = on_input_element_blur
  input_element.oninput = on_input_change; // Listen for input changes
  reset_button.onclick = on_reset_click
  text_span.onclick = on_span_click

  return el;

  function showInput () {
      sdb.pub('json', [{ isInputVisible: true }])
  }

  function hideInput () {
    sdb.pub('json', [{ isInputVisible: false, searchText: input_element.value }])
  }

    function on_input_change(event) {
        sdb.pub('json', [{searchText: input_element.value}])
    }

  function on_input_container_click (event) {
    showInput()
  }

  function on_input_element_blur (event) {
    if (input_element.value === '') {
      hideInput()
    }
  }

  function on_span_click (event) {
    event.stopPropagation()
    handle_breadcrumb_click(event)
  }

  function on_reset_click (event) {
    event.stopPropagation()
    handle_reset(event)
  }

  function handle_reset (event) {
      sdb.pub('json', [{ searchText: '', isInputVisible: false}])
  }

  function handle_breadcrumb_click (event) {
    showInput()
      sdb.pub('json', [{ placeholderText: '#night' }]);
  }
}

function get_theme (opts) {
  return `
    .search-bar-container {
      flex: 1;
      position: relative;
    }

    .search-input-container {
      height: 2rem;
      padding-left: 0.75rem;
      padding-right: 0.75rem;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      background-color: #303030;
      border-radius: 0.375rem;
      cursor: text;
    }
    
    svg {
      display: block;
      margin: auto;
    }
    
    .search-input-content {
      flex: 1;
    }

    .search-input-text {
      font-size: 0.875rem;
      color: #a0a0a0;
    }

    .search-input {
      width: 100%;
      background-color: transparent;
      outline: none;
      border: none;
      color: #a0a0a0;
      font-size: 0.875rem;
    }

    .search-reset-button {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      margin-left: 0;
      padding: 0;
      border: none;
      background-color: transparent;
    }

    .search-reset-button:hover {
      cursor: pointer;
    }
  `
}

module.exports = search_bar