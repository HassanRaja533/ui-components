const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = tabbed_editor

async function tabbed_editor(opts, protocol) {
  const { sdb } = await get(opts.sid)
  const { drive } = sdb
  const on = {
    style: inject_style,
    files: onfiles,
    highlight: onhighlight,
    active_tab: onactivetab
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
  <div class="tabbed-editor">
    <div class="editor-content">
      <div class="editor-placeholder">
        <div class="placeholder-text">Select a file to edit</div>
      </div>
    </div>
  </div>`

  const editor_content = shadow.querySelector('.editor-content')
  const placeholder = shadow.querySelector('.editor-placeholder')

  let init = false
  let files = {}
  let highlight_rules = {}
  let active_tab = null
  let current_editor = null

  let send = null
  let _ = null
  if (protocol) {
    send = protocol(msg => onmessage(msg))
    _ = { up: send }
  }

  const subs = await sdb.watch(onbatch)

  return el

  function onmessage({ type, data }) {
    switch (type) {
      case 'switch_tab':
        switch_to_tab(data)
        break
      case 'close_tab':
        close_tab(data)
        break
      case 'toggle_tab':
        toggle_tab(data)
        break
      default:
    }
  }

  function switch_to_tab(tab_data) {
    if (active_tab === tab_data.id) {
      return
    }
    
    active_tab = tab_data.id
    create_editor(tab_data)
    
    if (_) {
      _.up({ type: 'tab_switched', data: tab_data })
    }
  }

  function toggle_tab(tab_data) {
    if (active_tab === tab_data.id) {
      hide_editor()
      active_tab = null
    } else {
      switch_to_tab(tab_data)
    }
  }

  function close_tab(tab_data) {
    if (active_tab === tab_data.id) {
      hide_editor()
      active_tab = null
    }
    
    if (_) {
      _.up({ type: 'tab_closed', data: tab_data })
    }
  }

  function create_editor(tab_data) {
    let parsed_data = JSON.parse(tab_data[0])
    const file_content = files[parsed_data.id] || ''
    console.log('Creating editor for:', parsed_data)
    const file_extension = get_file_extension(parsed_data.name || parsed_data.id)
    const syntax_rules = highlight_rules[file_extension] || {}

    editor_content.innerHTML = ''

    const editor = document.createElement('div')
    editor.className = 'code-editor'
    
    const editor_wrapper = document.createElement('div')
    editor_wrapper.className = 'editor-wrapper'
    
    const line_numbers = document.createElement('div')
    line_numbers.className = 'line-numbers'
    
    const code_area = document.createElement('textarea')
    code_area.className = 'code-area'
    code_area.value = file_content
    code_area.spellcheck = false
    code_area.placeholder = `Start editing ${parsed_data.name || parsed_data.id}...`
    
    const syntax_overlay = document.createElement('div')
    syntax_overlay.className = 'syntax-overlay'
    
    editor_wrapper.appendChild(line_numbers)
    editor_wrapper.appendChild(code_area)
    editor_wrapper.appendChild(syntax_overlay)
    editor.appendChild(editor_wrapper)
    
    editor_content.appendChild(editor)
    current_editor = { editor, code_area, line_numbers, syntax_overlay, tab_data: parsed_data }
    
    code_area.oninput = handle_code_input
    code_area.onscroll = handle_code_scroll
    syntax_overlay.onscroll = handle_overlay_scroll
    
    update_line_numbers()
    apply_syntax_highlighting()
  }

  function hide_editor() {
    editor_content.innerHTML = `
      <div class="editor-placeholder">
        <div class="placeholder-text">Select a file to edit</div>
      </div>`
    current_editor = null
  }

  function update_line_numbers() {
    if (!current_editor) return
    
    const { code_area, line_numbers } = current_editor
    const lines = code_area.value.split('\n')
    const line_count = lines.length
    
    let line_html = ''
    for (let i = 1; i <= line_count; i++) {
      line_html += `<div class="line-number">${i}</div>`
    }
    
    line_numbers.innerHTML = line_html
  }

  function apply_syntax_highlighting() {
    if (!current_editor) return
    
    const { code_area, syntax_overlay, tab_data } = current_editor
    console.log('Applying syntax highlighting for:', tab_data)
    const file_extension = get_file_extension(tab_data.name)
    const syntax_rules = highlight_rules[file_extension] || {}
    const content = code_area.value
    
    let highlighted_content = escape_html(content)
    
    for (const [keyword, color] of Object.entries(syntax_rules)) {
      const regex = new RegExp(`\\b${keyword}\\b`, 'g')
      highlighted_content = highlighted_content.replace(
        regex, 
        `<span style="color: ${color}">${keyword}</span>`
      )
    }
    
    highlighted_content = highlighted_content.replace(/\n/g, '<br>')
    
    syntax_overlay.innerHTML = highlighted_content
  }

  function save_file_content() {
    if (!current_editor) return
    
    const { code_area, tab_data } = current_editor
    files[tab_data.id] = code_area.value
    
    if (_) {
      _.up({ 
        type: 'file_changed', 
        data: { 
          id: tab_data.id, 
          content: code_area.value 
        } 
      })
    }
  }

  function get_file_extension(filename) {
    const parts = filename.split('.')
    return parts.length > 1 ? parts[parts.length - 1] : ''
  }

  function escape_html(text) {
    const div = document.createElement('div')
    div.textContent = text
    return div.innerHTML
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
    if (!init) {
      init = true
    }
  }

  function fail(data, type) { 
    console.warn('Invalid message', { data, type })
  }

  function inject_style(data) {
    const sheet = new CSSStyleSheet()
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets = [sheet]
  }

  function onfiles(data) {
    files = data[0]
  }

  function onhighlight(data) {
    const file_type = data.type || 'default'
    const rules = typeof data.rules === 'string' ? JSON.parse(data.rules) : data.rules
    highlight_rules[file_type] = rules
  }

  function onactivetab(data) {
    if (data && data.id !== active_tab) {
      switch_to_tab(data)
    }
  }

  function handle_code_input() {
    update_line_numbers()
    apply_syntax_highlighting()
    save_file_content()
  }

  function handle_code_scroll() {
    if (!current_editor) return
    const { code_area, line_numbers, syntax_overlay } = current_editor
    line_numbers.scrollTop = code_area.scrollTop
    syntax_overlay.scrollTop = code_area.scrollTop
    syntax_overlay.scrollLeft = code_area.scrollLeft
  }

  function handle_overlay_scroll() {
    if (!current_editor) return
    const { code_area, syntax_overlay } = current_editor
    code_area.scrollLeft = syntax_overlay.scrollLeft
  }
}

function fallback_module() {
  return {
    api: fallback_instance
  }

  function fallback_instance() {
    return {
      drive: {
        'files/': {
          'example.js': {
            raw: `
              function hello() {
                console.log("Hello, World!");
              }

              const x = 42;
              let y = "string";

              if (x > 0) {
                hello();
              }
            `
          },
          'example.md': {
            raw: `
              # Example Markdown
              This is an **example** markdown file.

              ## Features

              - Syntax highlighting
              - Line numbers
              - File editing

              \`\`\`javascript
              function example() {
                return true;
              }
              \`\`\`
            `
          },
          'data.json': {
            raw: `
              {
                "name": "example",
                "version": "1.0.0",
                "dependencies": {
                "lodash": "^4.17.21"
              }
            `
          }
        },
        'highlight/': {
          'js': {
            raw: JSON.stringify({
              'function': '#ff7b72',
              'const': '#ff7b72', 
              'let': '#ff7b72',
              'var': '#ff7b72',
              'if': '#ff7b72',
              'else': '#ff7b72',
              'for': '#ff7b72',
              'while': '#ff7b72',
              'return': '#ff7b72',
              'true': '#79c0ff',
              'false': '#79c0ff',
              'null': '#79c0ff',
              'undefined': '#79c0ff',
              'console': '#d2a8ff',
              'log': '#d2a8ff',
              'document': '#ffa657',
              'window': '#ffa657',
              'Math': '#ffa657',
              'Array': '#ffa657',
              'Object': '#ffa657',
              'String': '#ffa657',
              'Number': '#ffa657'
            })
          },
          'css': {
            raw: JSON.stringify({
              'display': '#ff7b72',
              'position': '#ff7b72', 
              'background': '#ff7b72',
              'color': '#ff7b72',
              'margin': '#ff7b72',
              'padding': '#ff7b72',
              'border': '#ff7b72',
              'width': '#ff7b72',
              'height': '#ff7b72',
              'flex': '#ff7b72',
              'grid': '#ff7b72',
              'auto': '#79c0ff',
              'center': '#79c0ff',
              'relative': '#79c0ff',
              'absolute': '#79c0ff',
              'fixed': '#79c0ff'
            })
          },
          'md': {
            raw: JSON.stringify({
              '#': '#7ee787',
              '##': '#7ee787',
              '###': '#7ee787',
              '####': '#7ee787',
              '**': '#a5d6ff',
              '*': '#a5d6ff',
              '`': '#f85149',
              '-': '#ffa657',
              '1.': '#ffa657',
              '2.': '#ffa657',
              '3.': '#ffa657'
            })
          },
          'json': {
            raw: JSON.stringify({
              'true': '#79c0ff',
              'false': '#79c0ff',
              'null': '#79c0ff'
            })
          }
        },
        'style/': {
          'theme.css': {
            raw: `
              .tabbed-editor {
                width: 100%;
                height: 100%;
                background-color: #0d1117;
                color: #e6edf3;
                font-family: 'SFMono-Regular', 'Consolas', 'Liberation Mono', 'Menlo', monospace;
                display: grid;
                grid-template-rows: 1fr;
                position: relative;
                border: 1px solid #30363d;
                border-radius: 6px;
                overflow: hidden;
              }

              .editor-content {
                display: grid;
                grid-template-rows: 1fr;
                position: relative;
                overflow: hidden;
                background-color: #0d1117;
              }

              .editor-placeholder {
                display: flex;
                align-items: center;
                justify-content: center;
                height: 100%;
                color: #7d8590;
                font-style: italic;
                font-size: 16px;
                background: linear-gradient(135deg, #0d1117 0%, #161b22 100%);
              }

              .code-editor {
                height: 100%;
                display: grid;
                grid-template-rows: 1fr;
                background-color: #0d1117;
              }

              .editor-wrapper {
                display: grid;
                grid-template-columns: auto 1fr;
                position: relative;
                overflow: auto;
                background-color: #0d1117;
              }

              .line-numbers {
                background-color: #161b22;
                color: #7d8590;
                padding: 12px 16px 12px 20px;
                min-width: 60px;
                text-align: right;
                user-select: none;
                font-size: 13px;
                line-height: 20px;
                font-weight: 400;
                border-right: 1px solid #21262d;
                position: sticky;
                left: 0;
                z-index: 1;
              }

              .line-number {
                height: 20px;
                line-height: 20px;
                transition: color 0.1s ease;
              }

              .line-number:hover {
                color: #f0f6fc;
              }

              .code-area {
                background-color: transparent;
                color: transparent;
                border: none;
                outline: none;
                resize: none;
                font-family: 'SFMono-Regular', 'Consolas', 'Liberation Mono', 'Menlo', monospace;
                font-size: 13px;
                line-height: 20px;
                padding: 12px 16px;
                caret-color: #f0f6fc;
                position: relative;
                z-index: 2;
                tab-size: 2;
                white-space: pre;
                overflow-wrap: normal;
                overflow-x: auto;
                min-height: 100%;
              }

              .syntax-overlay {
                position: absolute;
                top: 0;
                left: 77px;
                right: 0;
                bottom: 0;
                pointer-events: none;
                font-family: 'SFMono-Regular', 'Consolas', 'Liberation Mono', 'Menlo', monospace;
                font-size: 13px;
                line-height: 20px;
                padding: 12px 16px;
                color: #e6edf3;
                white-space: pre;
                overflow: hidden;
                z-index: 1;
                background-color: #0d1117;
              }

              .code-area:focus {
                background-color: transparent;
                box-shadow: none;
              }

              .code-area::selection {
                background-color: #264f78;
              }

              .syntax-overlay::selection {
                background-color: transparent;
              }

              /* Scrollbar styling */
              .editor-wrapper::-webkit-scrollbar {
                width: 8px;
                height: 8px;
              }

              .editor-wrapper::-webkit-scrollbar-track {
                background: #161b22;
              }

              .editor-wrapper::-webkit-scrollbar-thumb {
                background: #30363d;
                border-radius: 4px;
              }

              .editor-wrapper::-webkit-scrollbar-thumb:hover {
                background: #484f58;
              }

              /* Syntax highlighting improvements */
              .syntax-keyword {
                color: #ff7b72;
                font-weight: 500;
              }

              .syntax-string {
                color: #a5d6ff;
              }

              .syntax-number {
                color: #79c0ff;
              }

              .syntax-comment {
                color: #8b949e;
                font-style: italic;
              }

              .syntax-function {
                color: #d2a8ff;
              }

              .syntax-variable {
                color: #ffa657;
              }
            `
          }
        },
        'active_tab/': {
          'current.json': {
            raw: JSON.stringify({
              id: 'example.js',
              name: 'example.js'
            })
          }
        }
      }
    }
  }
}
