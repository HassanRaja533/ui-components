const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = graph_explorer

async function graph_explorer (opts, protocol) {
  const { id, sdb } = await get(opts.sid)
  const {drive} = sdb
  const on = {
    style: inject,
    graph_data: on_graph_data,
    icons: iconject
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
  <div class="graph-explorer-container">
    <div class="graph-entries"></div>
  </div>
  <style>
  </style>`
  
  const style = shadow.querySelector('style')
  const graph_entries = shadow.querySelector('.graph-entries')

  let init = false
  let graph_data = []
  let icons = {}
  let expanded_entries = new Set()
  let super_nodes = new Map()
  let visible_super_nodes = new Set()
  
  const subs = await sdb.watch(onbatch)
  let send = null
  let _ = null
  if (protocol) {
    send = protocol(msg => onmessage(msg))
    _ = { up: send }
  }

  return el

  function create_graph_entry(entry, level = 0, parent_path = '', parent_entry = null) {
    const entry_el = document.createElement('div')
    entry_el.className = 'graph-entry'
    entry_el.style.paddingLeft = `${level * 20}px`
    
    const current_path = parent_path ? `${parent_path}/${entry.name}` : entry.name
    const has_children = entry.children && entry.children.length > 0
    const is_expanded = expanded_entries.has(current_path)
    
    // Store parent relationship
    if (parent_entry) {
      super_nodes.set(current_path, parent_entry)
    }
    
    const tree_symbol = get_tree_symbol(entry, level, is_expanded, has_children)
    const icon = icons[entry.type] || entry.icon || '📁'
    
    entry_el.innerHTML = `
    <span class="tree-symbol" data-path="${current_path}">${tree_symbol}</span>
    <span class="entry-icon" data-path="${current_path}">${icon}</span>
    <span class="entry-name">${entry.name}</span>
    `
    
    const tree_symbol_el = entry_el.querySelector('.tree-symbol')
    const icon_el = entry_el.querySelector('.entry-icon')
    
    // Add click event to tree symbol to show super node
    if (parent_entry && level > 0) {
      tree_symbol_el.onclick = () => toggle_super_node(current_path, parent_entry)
      tree_symbol_el.style.cursor = 'pointer'
      tree_symbol_el.title = `Show parent: ${parent_entry.name}`
    }
    
    // Add click event to icon for expanding children
    if (has_children) {
      icon_el.onclick = () => toggle_entry(current_path, entry)
    }
    
    return entry_el
  }

  function get_tree_symbol(entry, level, is_expanded, has_children) {
    if (level === 0) {
      return has_children ? (is_expanded ? '🪄┬' : '🪄─') : '🪄─'
    }
    
    if (has_children) {
      return is_expanded ? '├┬' : '├─'
    } else {
      return '├─'
    }
  }

  function toggle_entry(path, entry) {
    if (expanded_entries.has(path)) {
      expanded_entries.delete(path)
    } else {
      expanded_entries.add(path)
    }
    render_graph()
    
    if (protocol && _) {
      _.up({ 
        type: 'entry_toggled', 
        data: { path, expanded: expanded_entries.has(path), entry } 
      })
    }
  }

  function toggle_super_node(child_path, parent_entry) {
    const super_node_key = `super_${child_path}`
    
    if (visible_super_nodes.has(super_node_key)) {
      visible_super_nodes.delete(super_node_key)
    } else {
      visible_super_nodes.add(super_node_key)
    }
    
    render_graph()
    
    if (protocol && _) {
      _.up({ 
        type: 'super_node_toggled', 
        data: { child_path, parent_entry, visible: visible_super_nodes.has(super_node_key) } 
      })
    }
  }

  function create_super_node_entry(parent_entry, child_path, level) {
    const super_node_el = document.createElement('div')
    super_node_el.className = 'graph-entry super-node'
    super_node_el.style.paddingLeft = `${(level - 1) * 20}px`
    
    const parent_icon = icons[parent_entry.type] || parent_entry.icon || '📁'
    
    super_node_el.innerHTML = `
    <span class="tree-symbol">┌─</span>
    <span class="entry-icon super-node-icon">${parent_icon}</span>
    <span class="entry-name super-node-name">${parent_entry.name}</span>
    <span class="super-node-label">(parent)</span>
    `
    
    return super_node_el
  }

  function render_graph() {
    graph_entries.innerHTML = ''
    super_nodes.clear() // Clear previous parent relationships
    
    graph_data.forEach(entry => {
      render_entry_with_super_nodes(entry)
    })
  }

  function render_entry_with_super_nodes(entry, level = 0, parent_path = '', parent_entry = null) {
    const current_path = parent_path ? `${parent_path}/${entry.name}` : entry.name
    const super_node_key = `super_${current_path}`
    
    // Show super node if it's visible
    if (level > 0 && visible_super_nodes.has(super_node_key) && parent_entry) {
      const super_node_el = create_super_node_entry(parent_entry, current_path, level)
      graph_entries.appendChild(super_node_el)
    }
    
    // Create and append the main entry
    const entry_el = create_graph_entry(entry, level, parent_path, parent_entry)
    graph_entries.appendChild(entry_el)
    
    // Recursively render children if expanded
    const has_children = entry.children && entry.children.length > 0
    const is_expanded = expanded_entries.has(current_path)
    
    if (is_expanded && has_children) {
      entry.children.forEach(child => {
        render_entry_with_super_nodes(child, level + 1, current_path, entry)
      })
    }
  }

  function onmessage ({ type, data }) {
    if (type === 'expand_entry') {
      expanded_entries.add(data.path)
      render_graph()
    } else if (type === 'collapse_entry') {
      expanded_entries.delete(data.path)
      render_graph()
    } else if (type === 'show_super_node') {
      visible_super_nodes.add(`super_${data.path}`)
      render_graph()
    } else if (type === 'hide_super_node') {
      visible_super_nodes.delete(`super_${data.path}`)
      render_graph()
    }
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
    if (!init && graph_data.length > 0) {
      render_graph()
      init = true
    }
  }

  function fail(data, type) { 
    throw new Error('invalid message', { cause: { data, type } }) 
  }

  function inject(data) {
    style.innerHTML = data.join('\n')
  }

  function on_graph_data(data) {
    graph_data = JSON.parse(data[0])
  }

  function iconject(data) {
    icons = {
      root: data[0] || '🌐',
      folder: data[1] || '📁',
      code: data[2] || '📚',
      data: data[3] || '📁',
      tasks: data[4] || '🗄️'
    }
  }
}

function fallback_module () {
  return {
    api: fallback_instance
  }

  function fallback_instance () {
    return {
      drive: {
        'style/': {
          'theme.css': {
            raw: `
              .graph-explorer-container {
                background-color: #0d1117;
                color: #c9d1d9;
                font-family: 'Courier New', monospace;
                font-size: 14px;
                line-height: 1.4;
                padding: 12px;
                border-radius: 6px;
                border: 1px solid #21262d;
                min-height: 200px;
                max-height: 400px;
                overflow-y: auto;
              }
              .graph-entries {
                display: flex;
                flex-direction: column;
                gap: 2px;
              }
              .graph-entry {
                display: flex;
                align-items: center;
                gap: 4px;
                padding: 2px 0;
                white-space: nowrap;
                user-select: none;
              }
              .tree-symbol {
                color: #7c3aed;
                font-weight: bold;
                min-width: 24px;
              }
              .entry-icon {
                cursor: pointer;
                font-size: 16px;
                transition: transform 0.1s ease;
                min-width: 20px;
              }
              .entry-icon:hover {
                transform: scale(1.1);
              }
              .entry-name {
                color: #f0f6fc;
                font-weight: 500;
              }
              .super-node {
                background-color: #1c2128;
                border-left: 2px solid #7c3aed;
                margin: 1px 0;
                border-radius: 3px;
                padding: 2px 4px;
              }
              .super-node .tree-symbol {
                color: #fbbf24;
              }
              .super-node-icon {
                opacity: 0.8;
                cursor: default !important;
              }
              .super-node-name {
                color: #fbbf24;
                font-weight: 600;
              }
              .super-node-label {
                color: #6b7280;
                font-size: 12px;
                font-style: italic;
                margin-left: 8px;
              }
              .graph-explorer-container::-webkit-scrollbar {
                width: 6px;
              }
              .graph-explorer-container::-webkit-scrollbar-track {
                background: #161b22;
                border-radius: 3px;
              }
              .graph-explorer-container::-webkit-scrollbar-thumb {
                background: #30363d;
                border-radius: 3px;
              }
              .graph-explorer-container::-webkit-scrollbar-thumb:hover {
                background: #484f58;
              }
            `
          }
        },
        'graph_data/': {
          'structure.json': {
            raw: JSON.stringify([
              {
                name: '/',
                type: 'root',
                icon: '🌐',
                children: [
                  {
                    name: 'pins/',
                    type: 'folder',
                    icon: '📁',
                    children: []
                  },
                  {
                    name: 'code/',
                    type: 'code',
                    icon: '📚',
                    children: [
                      {
                        name: 'playproject_website',
                        type: 'folder',
                        icon: '📖',
                        children: [
                          {
                            name: 'index.html',
                            type: 'file',
                            icon: '📄',
                            children: []
                          },
                          {
                            name: 'main.js',
                            type: 'file',
                            icon: '📄',
                            children: []
                          }
                        ]
                      },
                      {
                        name: 'theme_widget',
                        type: 'folder',
                        icon: '📖',
                        children: [
                          {
                            name: 'widget.html',
                            type: 'file',
                            icon: '📄',
                            children: []
                          },
                          {
                            name: 'widget.js',
                            type: 'file',
                            icon: '📄',
                            children: []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    name: 'data/',
                    type: 'data',
                    icon: '📁',
                    children: [
                      {
                        name: 'themes/',
                        type: 'folder',
                        icon: '📁',
                        children: [
                          {
                            name: 'fantasy.json',
                            type: 'file',
                            icon: '🎨',
                            children: []
                          },
                          {
                            name: 'night.json',
                            type: 'file',
                            icon: '🎨',
                            children: []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    name: 'tasks/',
                    type: 'tasks',
                    icon: '🗄️',
                    children: []
                  }
                ]
              }
            ])
          }
        },
        'icons/': {
          'root.txt': {
            raw: '🌐'
          },
          'folder.txt': {
            raw: '📁'
          },
          'code.txt': {
            raw: '📚'
          },
          'data.txt': {
            raw: '📁'
          },
          'tasks.txt': {
            raw: '🗄️'
          }
        }
      }
    }
  }
}
