const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const space = require('space')
const taskbar = require('taskbar')

module.exports = theme_widget

async function theme_widget (opts) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: inject_style
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
  <div class="theme-widget">
    <div class="space-slot"></div>
    <div class="taskbar-slot"></div>
  </div>`

  const space_slot = shadow.querySelector('.space-slot')
  const taskbar_slot = shadow.querySelector('.taskbar-slot')

  const subs = await sdb.watch(onbatch)
  
  let space_el = null
  let taskbar_el = null

  const console_history_callback = () => {
    if (space_el && space_el.toggle_console_history) {
      space_el.toggle_console_history()
    }
  }

  const actions_callback = {
    show_actions: () => {
      if (space_el && space_el.show_actions) {
        space_el.show_actions()
      }
    },
    hide_actions: () => {
      if (space_el && space_el.hide_actions) {
        space_el.hide_actions()
      }
    },
    toggle_actions: () => {
      if (space_el && space_el.toggle_actions) {
        space_el.toggle_actions()
      }
    },
    filter_actions: (search_term) => {
      if (space_el && space_el.filter_actions) {
        space_el.filter_actions(search_term)
      }
    }
  }
  
  space_el = await space(subs[0], console_history_callback, actions_callback)
  space_el.classList.add('space')
  space_slot.replaceWith(space_el)

  taskbar_el = await taskbar(subs[1], console_history_callback, actions_callback)
  taskbar_slot.replaceWith(taskbar_el)

  return el

  function onbatch (batch) {
    for (const { type, data } of batch) {
      on[type] && on[type](data)
    }
  }

  function inject_style (data) {
    const sheet = new CSSStyleSheet()
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets = [sheet]
  }
}

function fallback_module () {
  return {
    api: fallback_instance,
    _: {
      'space': {
        $: ''
      },
      'taskbar': {
        $: ''
      }
    }
  }

  function fallback_instance () {
    return {
      _: {
        'space': {
          0: '',
          mapping: {
            'style': 'style'
          }
        },
        'taskbar': {
          0: '',
          mapping: {
            'style': 'style'
          }
        }
      },
      drive: {
        'style/': {
          'theme.css': {
            raw: `
              .theme-widget {
                display: flex;
                flex-direction: column;
                width: 100%;
                height: 100%;
                background: #131315;
              }
              .space{
                height: inherit;
                }
            `
          }
        }
      }
    }
  }
}
