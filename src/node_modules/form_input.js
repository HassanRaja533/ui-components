const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = form_input
async function form_input (opts, protocol) {
  const { id, sdb } = await get(opts.sid)
  const {drive} = sdb
	
	const on = {
    style: inject,
  }

  let current_step = null
	
	if(protocol){
    send = protocol(msg => onmessage(msg))
    _ = { up: send }
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
  <div class="input-display">
    <input class="input-field" type="text" placeholder="Type to search actions...">
  </div>
  <style>
  </style>`
  const style = shadow.querySelector('style')
  
	input_field_el = shadow.querySelector('.input-field')

	input_field_el.oninput = function () {
		if (this.value.length >= 10) {
			_.up({
        type: 'action_submitted',
        data: {
          value: this.value,
          index: current_step?.index || 0
        }
      })
			console.log('mark_as_complete')
		}
	}

  const subs = await sdb.watch(onbatch)

  
  return el

  async function onbatch(batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
  }

  function fail(data, type) { throw new Error('invalid message', { cause: { data, type } }) }

  function inject (data) {
    style.replaceChildren((() => {
      return document.createElement('style').textContent = data[0]
    })())
  }

	function onmessage ({ type, data }) {
    console.log('message from form_input', type, data)
    if (type === 'step_data') {
      current_step = data
      input_field_el.value = data?.data || ''
    }
  }

}
function fallback_module () {
  return {
    api: fallback_instance,
  }
  function fallback_instance () {
    return {
      drive: {
        'style/': {
          'theme.css': {
            raw: `
            .input-display {
							background: #131315;
              border-radius: 16px;
              border: 1px solid #3c3c3c;
							display: flex;
							flex: 1;
							align-items: center;
							padding: 0 12px;
							min-height: 32px;
            }
						.input-display:focus-within {
							border-color: #4285f4;
							background: #1a1a1c;
            }	
						.input-field {
							flex: 1;
							min-height: 32px;
							background: transparent;
							border: none;
							color: #e8eaed;
							padding: 0 12px;
							font-size: 14px;
							outline: none;
						}
						.input-field::placeholder {
							color: #a6a6a6;
						}
						`
          }
        }
      }
    }
  }
}
