const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, subs: [get] } = statedb(fallback_module)

module.exports = component
async function component(opts, btnobj = [
  {
    label: 'btn1',
     icon: 'icon1',
     callback : function func1(){ return console.log('btn1')}
  },
  {
    label: 'btn2',
     icon: 'icon2',
      callback : function func2(){ return console.log('btn2')}
  }
]) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: inject
  }
  const div = document.createElement('div')
  const shadow = div.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
  <div class="tabsbar">
    <div class="tab-entries"></div>
  </div>`
  const entries = shadow.querySelector('.tab-entries')
  btnobj.forEach(create_btn)
  const subs = await sdb.watch(onbatch)
  return div
  async function create_btn ({icon, label, callback}) {
    const el = document.createElement('div')
    const reqico = await load_svg(`../../src/assets/icons/${icon}.svg`)
    el.innerHTML = `
    <span class="icon">${reqico}</span>
    <span class="label">${label}</span>
    <button class="btn">X</button>`
    el.className = 'tabsbar-entry'
    const icon_el = el.querySelector('.icon')
    icon_el.onclick = callback
    entries.appendChild(el)
    return
  }
  async function load_svg(svg_url) {
    const response = await fetch(svg_url)
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    const text_svg = await response.text()
    return text_svg
  }
  function onbatch (batch) {
    for (const { type, data } of batch) {
      on[type] && on[type](data)
    }
  }
  function inject(data) {
    const sheet = new CSSStyleSheet()
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets = [sheet]
  }
}
function fallback_module() {
  return {
    api: fallback_instance,
  }
  function fallback_instance() {
    return {
      drive: {
        style: {
          'theme.css': {
            raw: ``
          }
        }
      }
    }
  }
}