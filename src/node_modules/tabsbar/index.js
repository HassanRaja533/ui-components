const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const tabs_component = require('tabs')

module.exports = tabsbar

async function tabsbar (opts, callback = id => console.log('calling:', '$' + id), callback_subs = id => console.log('calling_from_tabsbar:', '@' + id)) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: inject_style
  }
  let dricons = {}
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  const subs = await sdb.watch(onbatch)

  shadow.innerHTML = `
    <div class="tabs-bar-container">
      <button class="hat-btn">${dricons[0]}</button>
      <tabs></tabs>
      <button class="bar-btn">${dricons[1]}</button>
      <button class="bar-btn">${dricons[2]}</button>
    </div>
  `

  const tabs = await tabs_component(subs[0], callback_subs)
  tabs.classList.add('tabs-bar')
  shadow.querySelector('tabs').replaceWith(tabs)
  
  return el

  // Functions defined under return
  function onbatch (batch) {
    console.log('onbatch:', batch)
    for (const { type, data } of batch) {
      inject_icons(batch[1].data)
      on[type] && on[type](data)
    }
  }

  function inject_style (data) {
      const sheet = new CSSStyleSheet()
      sheet.replaceSync(data)
      shadow.adoptedStyleSheets = [sheet]
  }
  function inject_icons (data) {
    dricons = data
  }
}

function fallback_module () {
  return {
    api: fallback_instance,
    _: {
      'tabs': {
        '$': ''
      }
    }
  }

  function fallback_instance () {
    return {
      _: {
        'tabs': {
          0: '',
          mapping: {
            'icons': 'icons',
            'variables': 'variables',
            'scroll': 'scroll',
            'style': 'style'
          }
        }
      },
      drive: {
        'style/': {
          'theme.css': {
            raw: `
              .tabs-bar-container {
                display: flex;
                flex-direction: row;
                flex-wrap: nowrap;
                align-items: stretch;
              }
              .tabs-bar {
                display: flex;
                flex-direction: row;
                flex-wrap: nowrap;
                align-items: stretch;
              }
            `
          }
        },
        'icons/': {
          '1.svg': {
            '$ref': 'hat.svg'
          },
          '2.svg': {
            '$ref': 'hat.svg'
          },
          '3.svg': {
            '$ref': 'docs.svg'
          },
        },
      }
    }
  }
}