const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = console_history

async function console_history(opts, callback = () => console.log('clicked console history')) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: style_inject,
    icons: iconject,
    commands: oncommands
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  
  shadow.innerHTML = `
  <div class="console-history-container">
    <button class="icon-btn"></button>
    <div class="menu-container hidden">
      <div class="commands-list"></div>
    </div>
  </div>`

  const history_btn = shadow.querySelector('.icon-btn')
  const menu = shadow.querySelector('.menu-container')
  const commands_list = shadow.querySelector('.commands-list')
  
  let init = false
  let console_icon = ''
  let commands = []
  let dricons = []
  
  const subs = await sdb.watch(onbatch)
  history_btn.innerHTML = console_icon
  history_btn.onclick = toggle_menu
  
  return el

  function toggle_menu() {
    menu.classList.toggle('hidden')
  }

  function create_command_element(command) {
    const cmd_el = document.createElement('div')
    cmd_el.className = 'command-item'
    
    const icon = dricons[command.icon_type] || ''
    const linked_icon = command.linked?.icon_type ? dricons[command.linked.icon_type] : ''
    
    cmd_el.innerHTML = `
      <div class="command-content">
        <span class="icon">${icon}</span>
        <span class="command-text">${command.command}</span>
        <span class="name-path">${command.name_path}</span>
      </div>
      ${command.linked?.is ? `
      <div class="linked-content">
      <span class="linked-icon">${linked_icon}</span>
        <span class="linked-name">${command.linked.name}</span>
      </div>` : ''}`
    
    commands_list.appendChild(cmd_el)
  }

  function onbatch(batch) {
    for (const { type, data } of batch) (on[type] || fail)(data, type)
    if(!init){
      commands.forEach(create_command_element)
      init = true
    } else {
      //TODO
    }
  }

  function fail(data, type) { throw new Error('invalid message', { cause: { data, type } }) }

  function style_inject(data) {
    const sheet = new CSSStyleSheet()
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets = [sheet]
  }

  function iconject(data) {
    console_icon = data.shift()
    dricons = data
  }

  function oncommands(data) {
    commands = typeof data[0] === 'string' ? JSON.parse(data[0]) : data[0]
  }
}

function fallback_module() {
  return {
    api: fallback_instance
  }
  function fallback_instance() {
    return {
      drive: {
        'icons/': {
          'console.svg': {
            '$ref': 'console.svg'
          },
          'git.svg': {
            '$ref': 'console.svg'

          },
          'check.svg': {
            '$ref': 'console.svg'
          }
        },
        'style/': {
          'theme.css': {
            raw: `
              .console-history-container {
                position: relative;
              }
              .icon-btn {
                display: flex;
                min-width: 32px;
                height: 32px;
                border: none;
                background: transparent;
                cursor: pointer;
                flex-direction: row;
                justify-content: center;
                align-items: center;
                padding: 6px;
                border-radius: 6px;
                color: #a6a6a6;
              }
              .icon-btn:hover {
                background: rgba(255, 255, 255, 0.1);
              }
              .menu-container {
                position: relative;
                bottom: 100%;
                left: 0;
                width: 320px;
                background: #1e1e1e;
                border-radius: 8px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                margin-bottom: 8px;
                max-height: 400px;
                overflow-y: auto;
              }
              .hidden {
                display: none;
              }
              .commands-list {
                padding: 8px;
              }
              .command-item {
                padding: 8px;
                border-radius: 6px;
                margin-bottom: 4px;
                cursor: pointer;
              }
              .command-item:hover {
                background: rgba(255, 255, 255, 0.1);
              }
            `
          }
        },
        'commands/': {
          'list.json': {
            '$ref': 'commands.json'
          }
        }
      }
    }
  }
}